import type { ReactElement } from "react";
import { NextPageWithLayout } from "../_app";
import DashboardLayout from "@/layouts/DashboardLayout";
import Head from "next/head";
import {
  IconChevronLeft,
  IconChevronRight,
  IconLiveView,
  IconScreenShare,
  IconUserCheck,
  IconUsers,
  IconDownload,
} from "@tabler/icons-react";
import {
  useReactTable,
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
} from "@tanstack/react-table";
import { useRouter } from "next/router";
import useGetStudents from "@/utils/useGetStudents";
import Button from "@/components/ui/Button";
import CsvDownloadButton from "react-json-to-csv";

export type ExportType = {
  id: string;
  name: string;
  value: string;
};

const exportData: ExportType[] = [
  {
    id: "1",
    name: "Sarajane Wheatman",
    value: "value1",
  },
  {
    id: "2",
    name: "Linell Humpherston",
    value: "value2",
  },
];

export type Student = {
  name: string;
  academy: string;
  phoneNumber: string;
  email: string;
  presence: string;
  foodPreferences: string;
  team: number;
};

const columnHelper = createColumnHelper<Student>();

const columns = [
  columnHelper.accessor("name", {
    cell: (info) => info.getValue(),
    header: () => <span>Student name</span>,
  }),
  columnHelper.accessor("academy", {
    cell: (info) => info.getValue(),
    header: () => <span>Academy</span>,
  }),
  columnHelper.accessor("phoneNumber", {
    cell: (info) => info.getValue(),
    header: () => <span>Phone</span>,
  }),
  columnHelper.accessor("email", {
    cell: (info) => info.getValue(),
    header: () => <span>Email</span>,
  }),
  columnHelper.accessor("presence", {
    cell: (info) => info.getValue(),
    header: () => <span>Presence</span>,
  }),
  columnHelper.accessor("foodPreferences", {
    cell: (info) => info.getValue(),
    header: () => <span>Food preferences</span>,
  }),
  columnHelper.accessor("team", {
    cell: (info) => info.getValue(),
    header: () => <span>Team</span>,
  }),
];

const DashboardTracking: NextPageWithLayout = () => {
  const router = useRouter();

  const { pageIndex } = router.query;

  const { data, status } = useGetStudents();

  const {
    getHeaderGroups,
    getRowModel,
    getState,
    previousPage,
    nextPage,
    getCanNextPage,
    getCanPreviousPage,
  } = useReactTable({
    data: data ?? [],
    columns,
    initialState: {
      pagination: {
        pageIndex: Number(pageIndex) || 0,
      },
    },
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  });

  function previousTablePage() {
    router.push({
      query: { pageIndex: String(getState().pagination.pageIndex - 1) },
    });
    previousPage();
  }

  function nextTablePage() {
    router.push({
      query: { pageIndex: String(getState().pagination.pageIndex + 1) },
    });
    nextPage();
  }

  return (
    <>
      <Head>
        <title>Dashboard - Tracking</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="mx-auto flex w-11/12 flex-col gap-10 py-10 lg:w-full lg:p-10">
        <p className="text-3xl font-bold">Online matchmaking platform</p>

        <div className="grid grid-cols-1 gap-10 lg:grid-cols-2">
          <div className="flex flex-col gap-10">
            <div className="flex flex-col gap-2 rounded-lg bg-white p-5 shadow-lg">
              <div className="flex items-center gap-2">
                <IconUserCheck className="h-7 w-7 text-primary" />
                <p className="text-xl">Number of students applied</p>
              </div>

              <p className="text-xl font-bold">160</p>
            </div>

            <div className="flex flex-col gap-2 rounded-lg bg-white p-5 shadow-lg">
              <div className="flex items-center gap-2">
                <IconUsers className="h-7 w-7 text-primary" />
                <p className="text-xl">Number of groups</p>
              </div>

              <p className="text-xl font-bold">4</p>
            </div>
          </div>

          <div className="flex flex-col gap-10">
            <div className="flex flex-col gap-2 rounded-lg bg-white p-5 shadow-lg">
              <div className="flex items-center gap-2">
                <IconLiveView className="h-7 w-7 text-primary" />
                <p className="text-xl">Live</p>
              </div>

              <p className="text-xl font-bold">100</p>
            </div>

            <div className="flex flex-col gap-2 rounded-lg bg-white p-5 shadow-lg">
              <div className="flex items-center gap-2">
                <IconScreenShare className="h-7 w-7 text-primary" />
                <p className="text-xl">Online</p>
              </div>

              <p className="text-xl font-bold">60</p>
            </div>
          </div>
        </div>

        <div className="overflow-x-auto rounded-lg border border-transparent">
          <table className="min-w-full divide-y divide-gray-500">
            <thead className="bg-primary">
              {getHeaderGroups().map((headerGroup) => (
                <tr key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <th
                      scope="col"
                      className="px-3 py-3.5 text-left font-semibold text-white"
                      key={header.id}
                    >
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </th>
                  ))}
                </tr>
              ))}
            </thead>
            <tbody
              className={`divide-y divide-gray-500 rounded-lg bg-white ${
                status === "loading" ? "animate-pulse" : ""
              }`}
            >
              {data &&
                getRowModel().rows.map((row) => (
                  <tr key={row.id}>
                    {row.getVisibleCells().map((cell) => (
                      <td
                        className="w-1/6 whitespace-nowrap px-3 py-4 text-sm text-neutral-950"
                        key={cell.id}
                      >
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </td>
                    ))}
                  </tr>
                ))}

              {status === "loading" &&
                [...Array(10)].map((_, i) => (
                  <tr key={i}>
                    <td className="w-1/3 whitespace-nowrap px-3 py-4 text-sm opacity-0">
                      0
                    </td>
                    <td className="w-1/3 whitespace-nowrap px-3 py-4 text-sm opacity-0">
                      0
                    </td>
                    <td className="w-1/3 whitespace-nowrap px-3 py-4 text-sm opacity-0">
                      0
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>

        <div className="flex flex-col items-center justify-between gap-4 lg:flex-row">
          <div className="hidden w-full lg:block" />
          <div className="flex w-full items-center justify-center gap-4">
            <Button
              variant={!getCanPreviousPage() ? "disabled" : "primary"}
              disabled={!getCanPreviousPage()}
              onClick={previousTablePage}
            >
              <IconChevronLeft />
            </Button>
            <div></div>
            <Button
              variant={!getCanNextPage() ? "disabled" : "primary"}
              disabled={!getCanNextPage()}
              onClick={nextTablePage}
            >
              <IconChevronRight />
            </Button>
          </div>

          <div className="flex w-full justify-center lg:justify-end">
            <CsvDownloadButton
              className="rounded-lg bg-primary px-4 py-3 text-white transition-colors hover:bg-primary-100"
              data={data ? data : {}}
              filename="export_excel.csv"
              delimiter=";"
            >
              <div className="flex items-center gap-1">
                Download resources
                <IconDownload className="h-4 w-4" />
              </div>
            </CsvDownloadButton>
          </div>
        </div>
      </div>
    </>
  );
};

DashboardTracking.getLayout = function getLayout(page: ReactElement) {
  return <DashboardLayout>{page}</DashboardLayout>;
};

export default DashboardTracking;
